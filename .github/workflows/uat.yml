name: UAT Workflow

on:
  pull_request:
    branches: [develop]

jobs:
  create-approval:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Create Approval Issue
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh issue create \
          --title "Approve UAT Deployment" \
          --body "A new deployment is ready for UAT.

          Details:
          - Repository: ${{ github.repository }}
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}

          To approve this deployment:
          - Comment '/approve' on this issue
          
          To deny:
          - Comment '/deny' on this issue"

    - name: Wait for Approval
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        max_attempts=30  # Approximately 15 minutes of waiting
        attempt=0
        
        while [ $attempt -lt $max_attempts ]; do
          ISSUE=$(gh issue list --limit 1)
          ISSUE_NUMBER=$(echo "$ISSUE" | awk '{print $1}')
          
          COMMENTS=$(gh issue view $ISSUE_NUMBER --comments)
          
          if echo "$COMMENTS" | grep -qE "(/approve|LGTM|looks good)"; then
            echo "Deployment approved!"
            exit 0
          fi
          
          if echo "$COMMENTS" | grep -q "/deny"; then
            echo "Deployment denied!"
            exit 1
          fi
          
          sleep 30
          attempt=$((attempt + 1))
        done
        
        echo "Approval timeout reached"
        exit 1

  build-and-deploy:
    needs: create-approval
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_UAT_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_UAT_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/my-nginx-app:$IMAGE_TAG .
        docker push $ECR_REGISTRY/my-nginx-app:$IMAGE_TAG

    - name: Deploy to UAT Fargate
      env:
        ECS_SERVICE: my-nginx-uat-service
        ECS_CLUSTER: my-nginx-uat-cluster
        CONTAINER_NAME: my-nginx-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        task_def=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $task_def

    - name: Run Smoke Tests
      run: |
        # Basic smoke test to check if the application is responding
        UAT_ALB_DNS=$(aws elbv2 describe-load-balancers --names my-nginx-uat-alb --query 'LoadBalancers[0].DNSName' --output text)
        if curl -s --head --request GET $UAT_ALB_DNS | grep "200 OK" > /dev/null; then
          echo "Smoke test passed: Application is responding"
        else
          echo "Smoke test failed: Application is not responding"
          exit 1
        fi