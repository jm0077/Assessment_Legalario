name: Production Workflow

on:
  push:
    branches: [master]

jobs:

  create-approval:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Create Approval Issue
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh issue create \
          --title "Approve Production Deployment" \
          --body "A new deployment is ready for production.

          Details:
          - Repository: ${{ github.repository }}
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}

          To approve this deployment:
          - Comment '/approve' on this issue
          
          To deny:
          - Comment '/deny' on this issue"

    - name: Wait for Approval
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Esperar y verificar la aprobación
        max_attempts=30  # Aproximadamente 15 minutos de espera
        attempt=0
        
        while [ $attempt -lt $max_attempts ]; do
          # Obtener el último issue
          ISSUE=$(gh issue list --limit 1)
          ISSUE_NUMBER=$(echo "$ISSUE" | awk '{print $1}')
          
          # Verificar comentarios del issue
          COMMENTS=$(gh issue view $ISSUE_NUMBER --comments)
          
          # Verificar aprobación
          if echo "$COMMENTS" | grep -qE "(/approve|LGTM|looks good)"; then
            echo "Deployment approved!"
            exit 0
          fi
          
          # Verificar denegación
          if echo "$COMMENTS" | grep -q "/deny"; then
            echo "Deployment denied!"
            exit 1
          fi
          
          # Esperar 30 segundos
          sleep 30
          attempt=$((attempt + 1))
        done
        
        echo "Approval timeout reached"
        exit 1

  build-and-push:
    needs: create-approval
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
        
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/my-nginx-app:$IMAGE_TAG .
        docker push $ECR_REGISTRY/my-nginx-app:$IMAGE_TAG

  blue-green-deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy to Fargate (Blue)
      env:
        ECS_SERVICE: my-nginx-prod-blue
        ECS_CLUSTER: my-nginx-prod-cluster
        CONTAINER_NAME: my-nginx-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Create new task definition
        task_def=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
        
        # Update Blue service with new task definition
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $task_def

    - name: Configure Application Load Balancer
      env:
        ALB_DNS: ${{ secrets.ALB_DNS }}
      run: |
        # Configure ALB to point to Blue environment
        aws elb modify-load-balancer-listeners --load-balancer-name my-nginx-alb --listener-descriptions file://alb-listener-config.json

    - name: Run Smoke Tests
      run: |
        # Basic smoke test to check if the application is responding
        ALB_DNS=$(aws elbv2 describe-load-balancers --names my-nginx-alb --query 'LoadBalancers[0].DNSName' --output text)
        if curl -s --head --request GET $ALB_DNS | grep "200 OK" > /dev/null; then
          echo "Smoke test passed: Application is responding"
        else
          echo "Smoke test failed: Application is not responding"
          exit 1
        fi
        
    - name: Swap Blue-Green Deployments
      env:
        ECS_BLUE_SERVICE: my-nginx-prod-blue
        ECS_GREEN_SERVICE: my-nginx-prod-green
      run: |
        # Swap the Blue and Green services
        aws ecs update-service --cluster my-nginx-prod-cluster --service $ECS_BLUE_SERVICE --desired-count 0
        aws ecs update-service --cluster my-nginx-prod-cluster --service $ECS_GREEN_SERVICE --desired-count 1