name: Production Workflow

on:
  push:
    branches: [master]

jobs:

  create-approval:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Create Approval Issue
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh issue create \
          --title "Approve Production Deployment" \
          --body "A new deployment is ready for production.

          Details:
          - Repository: ${{ github.repository }}
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}

          To approve this deployment:
          - Comment '/approve' on this issue
          
          To deny:
          - Comment '/deny' on this issue"

    - name: Wait for Approval
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Esperar y verificar la aprobación
        max_attempts=30  # Aproximadamente 15 minutos de espera
        attempt=0
        
        while [ $attempt -lt $max_attempts ]; do
          # Obtener el último issue
          ISSUE=$(gh issue list --limit 1)
          ISSUE_NUMBER=$(echo "$ISSUE" | awk '{print $1}')
          
          # Verificar comentarios del issue
          COMMENTS=$(gh issue view $ISSUE_NUMBER --comments)
          
          # Verificar aprobación
          if echo "$COMMENTS" | grep -qE "(/approve|LGTM|looks good)"; then
            echo "Deployment approved!"
            exit 0
          fi
          
          # Verificar denegación
          if echo "$COMMENTS" | grep -q "/deny"; then
            echo "Deployment denied!"
            exit 1
          fi
          
          # Esperar 30 segundos
          sleep 30
          attempt=$((attempt + 1))
        done
        
        echo "Approval timeout reached"
        exit 1

  build-and-push:
    needs: create-approval
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq
        
    - name: Prepare Task Definition
      env:
        TASK_ROLE_ARN: ${{ secrets.TASK_ROLE_ARN }}
        EXECUTION_ROLE_ARN: ${{ secrets.TASK_EXECUTION_ROLE_ARN }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: my-nginx-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Configurar roles de Terraform
        TASK_ROLE_ARN="arn:aws:iam::908027419539:role/ecs-task-role"
        EXECUTION_ROLE_ARN="arn:aws:iam::908027419539:role/ecs-task-execution-role"

        # Crear archivo de definición de tarea con escape de caracteres
        jq -n \
          --arg family "my-nginx-task" \
          --arg task_role "$TASK_ROLE_ARN" \
          --arg exec_role "$EXECUTION_ROLE_ARN" \
          --arg registry "$ECR_REGISTRY" \
          --arg repo "$ECR_REPOSITORY" \
          --arg tag "$IMAGE_TAG" \
        '{
          "family": $family,
          "taskRoleArn": $task_role,
          "executionRoleArn": $exec_role,
          "containerDefinitions": [{
            "name": "my-nginx-app",
            "image": ($registry + "/" + $repo + ":" + $tag),
            "portMappings": [{
              "containerPort": 80,
              "hostPort": 80,
              "protocol": "tcp"
            }],
            "essential": true
          }],
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "runtimePlatform": {
            "operatingSystemFamily": "LINUX"
          }
        }' > task-definition.json

        # Validar archivo generado
        cat task-definition.json

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: my-nginx-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  blue-green-deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Create Target Group for Green Environment
      env:
        VPC_ID: ${{ secrets.VPC_ID }}
      run: |
        SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        TARGET_GROUP_ARN=$(aws elbv2 create-target-group \
          --name green-tg-$SHORT_SHA \
          --protocol HTTP \
          --port 80 \
          --vpc-id $VPC_ID \
          --target-type ip \
          --query 'TargetGroups[0].TargetGroupArn' \
          --output text)
        
        echo "TARGET_GROUP_ARN=$TARGET_GROUP_ARN" >> $GITHUB_ENV

    - name: Deploy to Fargate Green Environment
      env:
        ECS_SERVICE: my-nginx-prod-green
        ECS_CLUSTER: my-nginx-prod-cluster
        CONTAINER_NAME: my-nginx-app
      run: |
        task_def=$(aws ecs register-task-definition \
          --cli-input-json file://task-definition.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --task-definition $task_def \
          --desired-count 1

    - name: Run Smoke Tests
      run: |
        # Obtener DNS del balanceador de cargas
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names my-nginx-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text)
        
        # Prueba básica de disponibilidad
        if curl -s --head --request GET $ALB_DNS | grep "200 OK" > /dev/null; then
          echo "Smoke test passed: Application is responding"
        else
          echo "Smoke test failed: Application is not responding"
          exit 1
        fi

    - name: Swap Blue-Green Deployments
      env:
        ECS_BLUE_SERVICE: my-nginx-prod-blue
        ECS_GREEN_SERVICE: my-nginx-prod-green
        ECS_CLUSTER: my-nginx-prod-cluster
      run: |
        # Verificar si el servicio Blue existe y tiene tareas en ejecución
        BLUE_SERVICE_DETAILS=$(aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_BLUE_SERVICE \
          --query 'services[0].runningCount' \
          --output text)

        if [ "$BLUE_SERVICE_DETAILS" != "0" ]; then
          # Reducir servicios Blue a 0 solo si hay tareas en ejecución
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_BLUE_SERVICE \
            --desired-count 0
        fi
        
        # Escalar Green a 1
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_GREEN_SERVICE \
          --desired-count 1

    - name: Update Load Balancer Listener
      env:
        LISTENER_ARN: ${{ secrets.LISTENER_ARN }}
      run: |
        aws elbv2 modify-listener \
          --listener-arn $LISTENER_ARN \
          --default-actions \
            Type=forward,TargetGroupArn=${{ env.TARGET_GROUP_ARN }}