name: Production Workflow

on:
  pull_request:
    branches:
      - master

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER_NAME }}
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
  SERVICE_PREFIX: ${{ secrets.SERVICE_PREFIX }}

jobs:
  create-approval:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create Approval Issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue create \
            --title "Approve Production Deployment" \
            --body "A new deployment is ready for production.
            Details:
            - Repository: ${{ github.repository }}
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}
            To approve this deployment:
            - Comment '/approve' on this issue
            To deny:
            - Comment '/deny' on this issue"
      - name: Wait for Approval
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          max_attempts=30
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            ISSUE=$(gh issue list --limit 1)
            ISSUE_NUMBER=$(echo "$ISSUE" | awk '{print $1}')
            COMMENTS=$(gh issue view $ISSUE_NUMBER --comments)
            if echo "$COMMENTS" | grep -qE "(/approve|LGTM|looks good)"; then
              echo "Deployment approved!"
              exit 0
            fi
            if echo "$COMMENTS" | grep -q "/deny"; then
              echo "Deployment denied!"
              exit 1
            fi
            sleep 30
            attempt=$((attempt + 1))
          done
          echo "Approval timeout reached"
          exit 1

  build:
    needs: create-approval
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr

      - name: Build, tag, and push image to ECR
        env:
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update Task Definition
        id: task-def
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "task_def_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Create New Green Service
        env:
          GREEN_TARGET_GROUP_ARN: ${{ secrets.GREEN_TARGET_GROUP_ARN }}
          PUBLIC_SUBNET_IDS: ${{ secrets.PUBLIC_SUBNET_IDS }}
          SECURITY_GROUP: ${{ secrets.SECURITY_GROUP_ID }}
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          NEW_SERVICE_NAME="${SERVICE_PREFIX}-${TIMESTAMP}"
          echo "new_service_name=${NEW_SERVICE_NAME}" >> $GITHUB_ENV
          
          aws ecs create-service \
            --cluster $ECS_CLUSTER \
            --service-name $NEW_SERVICE_NAME \
            --task-definition ${{ steps.task-def.outputs.task_def_arn }} \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$PUBLIC_SUBNET_IDS],securityGroups=[$SECURITY_GROUP],assignPublicIp=ENABLED}" \
            --load-balancers targetGroupArn=$GREEN_TARGET_GROUP_ARN,containerName=$CONTAINER_NAME,containerPort=80

      - name: Verify Green Deployment
        env:
          GREEN_TARGET_GROUP_ARN: ${{ secrets.GREEN_TARGET_GROUP_ARN }}
          ALB_DNS: ${{ secrets.ALB_DNS }}
        run: |
          sleep 30
          
          TASK_ARN=$(aws ecs list-tasks \
            --cluster $ECS_CLUSTER \
            --service-name ${{ env.new_service_name }} \
            --query 'taskArns[0]' \
            --output text)

          echo "Task ARN: $TASK_ARN"

          if [ -z "$TASK_ARN" ] || [ "$TASK_ARN" == "null" ]; then
            echo "No se encontró ninguna tarea en ejecución"
            exit 1
          fi

          max_attempts=20
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            TASK_STATUS=$(aws ecs describe-tasks \
              --cluster $ECS_CLUSTER \
              --tasks "$TASK_ARN" \
              --query 'tasks[0].lastStatus' \
              --output text)

            echo "Task Status: $TASK_STATUS"

            TARGET_HEALTH=$(aws elbv2 describe-target-health \
              --target-group-arn $GREEN_TARGET_GROUP_ARN \
              --query 'TargetHealthDescriptions[0].TargetHealth.State' \
              --output text)

            echo "Target Health: $TARGET_HEALTH"

            if [[ "$TASK_STATUS" == "RUNNING" ]] && [[ "$TARGET_HEALTH" == "healthy" ]]; then
              echo "Task is running and healthy"
              break
            fi

            if [[ "$TASK_STATUS" == "STOPPED" ]]; then
              echo "Task stopped unexpectedly"
              exit 1
            fi

            attempt=$((attempt + 1))
            echo "Attempt $attempt of $max_attempts"
            sleep 30
          done

          if [ $attempt -eq $max_attempts ]; then
            echo "Se alcanzó el máximo número de intentos sin éxito"
            exit 1
          fi

          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $ALB_DNS)
          echo "HTTP Response Code: $RESPONSE"

          if [ "$RESPONSE" != "200" ]; then
            echo "La aplicación no está respondiendo correctamente"
            exit 1
          fi

          echo "Green Deployment verified successfully"

      - name: Switch Traffic to Green
        run: |
          aws elbv2 modify-rule \
            --rule-arn ${{ secrets.GREEN_LISTENER_RULE_ARN }} \
            --actions Type=forward,TargetGroupArn=${{ secrets.GREEN_TARGET_GROUP_ARN }}

      - name: Clean Up Old Services
        run: |
          SERVICES=$(aws ecs list-services \
            --cluster $ECS_CLUSTER \
            --query 'serviceArns[*]' \
            --output text)
          
          for SERVICE in $SERVICES; do
            SERVICE_NAME=$(basename $SERVICE)
            if [ "$SERVICE_NAME" != "${{ env.new_service_name }}" ]; then
              echo "Deleting old service: $SERVICE_NAME"
              aws ecs delete-service \
                --cluster $ECS_CLUSTER \
                --service $SERVICE_NAME \
                --force || true
            fi
          done

      - name: Verify Final Deployment
        env:
          ALB_DNS: ${{ secrets.ALB_DNS }}
        run: |
          sleep 30
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://$ALB_DNS)

          if [ "$RESPONSE" != "200" ]; then
            echo "Final deployment verification failed"
            exit 1
          fi

          echo "Blue-Green deployment completed successfully"