name: Production Workflow  

on:
  push:
    branches: [master]

jobs:

  deploy_prod:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    # Build and push Docker image
    
    # Deploy to Production Fargate service
    
    # Run smoke tests and get approval
    - name: Request Production Approval
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { owner, repo } = context.repo;
          const runId = context.runId;
          
          // Crear un issue para aprobaciÃ³n manual
          const issue = await github.rest.issues.create({
            owner,
            repo,
            title: `Manual Approval Required for Workflow Run ${runId}`,
            body: `This workflow requires manual approval.\n\nWorkflow Run: ${context.serverUrl}/${owner}/${repo}/actions/runs/${runId}\n\nTo approve, comment \`/approve\` on this issue.\nTo deny, comment \`/deny\`.`
          });

          // Esperar a que se apruebe o deniegue el issue
          const { data: comments } = await github.rest.issues.listComments({
            owner,
            repo,
            issue_number: issue.data.number
          });

          const approvalComment = comments.find(comment => 
            comment.body.trim().toLowerCase() === '/approve'
          );

          const denialComment = comments.find(comment => 
            comment.body.trim().toLowerCase() === '/deny'
          );

          if (denialComment) {
            core.setFailed('Deployment denied');
            await github.rest.issues.update({
              owner,
              repo,
              issue_number: issue.data.number,
              state: 'closed'
            });
            return;
          }

          if (!approvalComment) {
            core.setFailed('No approval received');
            return;
          }

          // Cerrar el issue si se aprueba
          await github.rest.issues.update({
            owner,
            repo,
            issue_number: issue.data.number,
            state: 'closed'
          });