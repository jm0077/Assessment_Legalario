name: Production Workflow

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: my-nginx-app
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Register Task Definition
        id: task-def
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "task_def_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Update ECS Service with Load Balancer
        env:
          ECS_SERVICE: my-nginx-prod-service
          ECS_CLUSTER: my-nginx-prod-cluster
          TARGET_GROUP_ARN: ${{ secrets.TARGET_GROUP_ARN }}
          PUBLIC_SUBNET_IDS: subnet-05b5533b0a8602474,subnet-095b0b27bd626d558,subnet-0247dff8cb76adddf
          SECURITY_GROUP: sg-0e2f023a42da0b442
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition ${{ steps.task-def.outputs.task_def_arn }} \
            --desired-count 1 \
            --load-balancers targetGroupArn=$TARGET_GROUP_ARN,containerName=my-nginx-app,containerPort=80 \
            --network-configuration "awsvpcConfiguration={subnets=[$PUBLIC_SUBNET_IDS],securityGroups=[$SECURITY_GROUP],assignPublicIp=ENABLED}"

      - name: Verify Deployment
        env:
          ALB_DNS: my-nginx-alb-1798249720.us-east-1.elb.amazonaws.com
        run: |
          # Wait for service stability with longer timeout
          aws ecs wait services-stable \
            --cluster my-nginx-prod-cluster \
            --services my-nginx-prod-service \
            --max-attempts 30

          # Get current target group ARN
          TARGET_GROUP_ARN=$(aws ecs describe-services \
            --cluster my-nginx-prod-cluster \
            --services my-nginx-prod-service \
            --query 'services[0].loadBalancers[0].targetGroupArn' \
            --output text)

          # Wait for target group to have healthy targets
          max_attempts=10
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            TARGET_HEALTH=$(aws elbv2 describe-target-health \
              --target-group-arn $TARGET_GROUP_ARN \
              --query 'TargetHealthDescriptions[*].TargetHealth.State' \
              --output text)

            if [[ "$TARGET_HEALTH" == *"healthy"* ]]; then
              break
            fi

            attempt=$((attempt + 1))
            sleep 30
          done

          # HTTP request to verify application
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://$ALB_DNS)

          # Check conditions
          if [ $attempt -eq $max_attempts ] || [ "$RESPONSE" != "200" ]; then
            echo "Deployment verification failed:"
            echo "Target Group Health: $TARGET_HEALTH"
            echo "HTTP Response: $RESPONSE"
            exit 1
          fi

          echo "Deployment verified successfully"